{"version":3,"sources":["webpack:///path---ecma-script-implematiation-of-promise-dc3cf153c2f322fcc7f9.js","webpack:///./.cache/json/ecma-script-implematiation-of-promise.json"],"names":["webpackJsonp","481","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","next","fields"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,aAAAC,OAAA,YAAyCC,gBAAmBC,GAAA,0HAAAC,KAAA;AAA00xCC,aAA+nDL,MAAA,eAAAM,KAAA,sBAAmDC,aAAgBC,KAAA,yCAAAC,UAAA,EAAAC,MAAyEC,QAAUH,KAAA,2BAAiCH,aAAgBL,MAAA","file":"path---ecma-script-implematiation-of-promise-dc3cf153c2f322fcc7f9.js","sourcesContent":["webpackJsonp([241246743303109],{\n\n/***/ 481:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Whinc Blog\",\"author\":\"whincwu\"}},\"markdownRemark\":{\"id\":\"/Users/whincwu/Projects/blog/src/pages/ECMAScript/implematiation-of-promise/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>前言</h2>\\n<p>为了增强对 ES6 <code>Promise</code>工作方式的理解，我实现了一个自己的<code>ES6Promise</code>类，接口与 ES6 的<code>Promise</code>类一致（包含构造函数、<code>then</code>、<code>catch</code>、<code>resolve</code>、<code>reject</code>）， 并且符合 <a href=\\\"https://promisesaplus.com/\\\">Promise/A+ 规范</a> 。下面从简单开始，一步步实现一个自己的<code>Promise</code>。</p>\\n<p>下面是最终实现的<code>ES6Promise</code>使用示例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span>ES6Promise<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./es6-promise'</span>\\n\\n\\n<span class=\\\"token keyword\\\">let</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> p2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">999</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nES6Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> reason<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> ES6Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>p2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> reason<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>                    <span class=\\\"token comment\\\">// 999</span>\\n</code></pre>\\n      </div>\\n<h2>创建 Promise</h2>\\n<p>回想 ES6 的 <code>Promise</code>对象构造函数，它要求传入一个执行器，执行器有两个参数<code>resolve</code>和<code>reject</code>，两个参数都是函数类型，我们可以在执行器中调用这两个方法，将<code>Promise</code>变为<code>resolved</code>或<code>rejected</code>。先实现这个一步，代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>const State = {\\n    pending: 0,\\n    resolved: 1,\\n    rejected: 2\\n}\\n\\nclass ES6Promise {\\n    constructor(executor) {\\n        this._state = State.pending;    // 保存状态，取值为 State 之一\\n        this._value = undefined;        // 保存 resolve 或 reject 时所传入的值\\n        this._callbacks = [];           // 保存状态监听函数，promise 状态变化时调用\\n\\n        if (typeof executor === 'function') {\\n            let resolve = (value) => {\\n                this._transition(State.resolved, value);\\n            };\\n\\n            let reject = (value) => {\\n                this._transition(State.rejected, value);\\n            };\\n            executor(resolve, reject);\\n        }\\n    }\\n\\n    // 状态转移\\n    _transition(state, value) {        \\n        if (this._state === State.pending) {    \\n            this._state = state;               \\n            this._value = value;\\n            this._callbacks.forEach(callback => callback());\\n        } \\n    }\\n}</code></pre>\\n      </div>\\n<p>使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> promise1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>首先，在<code>MyPromise</code>构造函数中声明了两个成员变量<code>status</code>和<code>data</code>，分别表示<code>MyPromise</code>的状态和数据。根据<code>Promise</code>规范，其状态只能有三种：<code>pending</code>、<code>resolved</code>和<code>rejected</code>，初始状态是<code>pending</code>，一旦变化为<code>resolved</code>或<code>rejected</code>状态后，其状态不再变化。所以，初始设置<code>status</code>为<code>undefined</code>，当调用<code>resolve()</code>或<code>reject()</code>时，内部先判断其状态，如果状态已经发生变化，则直接返回，这样保证其状态不会被修改。否则，将状态标记为<code>resolved</code>或<code>rejected</code>，同时保存数据。</p>\\n<h2>实现 then 方法</h2>\\n<p><code>Promise</code>对象可以链式调用<code>then()</code>方法，这得益于<code>then()</code>返回的也是<code>Promise</code>对象（准确说是<code>thenable</code>对象，即包含<code>then</code>方法的对象），例如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>let promise1 = new ES6Promise((resolve, reject) => {\\n    resolve(1);\\n});\\n\\nlet promise2 = promise1.then(function onResolved(){}, function onRejected() {});</code></pre>\\n      </div>\\n<p>所以下面<code>ES6Promise</code>的<code>then</code>函数实现中，首先创建并返回一个新的<code>ES6Promise</code>对象<code>promise2</code>，在传入<code>promise2</code>构造函数的执行器内部，通过<code>resolve</code>和<code>reject</code>方法修改<code>promise2</code>的状态。<code>promise2</code>状态何时变化，取决于当前<code>promise1</code>的状态，如果<code>promise1</code>状态是<code>pending</code>，则等待<code>promise1</code>被<code>resolved</code>或<code>rejected</code>时执行<code>scheduleFn()</code>，否则立即执行<code>scheduleFn()</code>。</p>\\n<p><code>scheduleFn()</code>方法主要工作是，根据<code>promise1</code>当前状态是<code>resolved</code>（或<code>rejected</code>），调用<code>then(onResolved, onRejected)</code>方法参数中的<code>onResolved(promise1.value)</code>（或<code>onRejected(promise1.value)</code>），以<code>promise1</code>的内部值作为参数，返回结果传递给<code>promise2</code>的<code>resolve</code>（或<code>reject</code>）方法，从而改变<code>promise2</code>的状态和内部值。按 <a href=\\\"https://promisesaplus.com/\\\">Promise/A+ 规范</a> <code>scheduleFn()</code>必须是异步执行的，所以这里通过<code>setTimeout()</code>方法，让其在下个事件循环中处理。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>onResolved<span class=\\\"token punctuation\\\">,</span> onRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">let</span> promise2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">scheduleFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n                    onResolved <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onResolved <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onResolved <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> v<span class=\\\"token punctuation\\\">;</span>\\n                    onRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onRejected <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onRejected <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">throw</span> v<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>resolved<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">onResolved</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">onRejected</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token punctuation\\\">}</span>                    \\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>pending<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>scheduleFn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">scheduleFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> promise2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>实现 then 方法 v2</h2>\\n<p>上面实现的<code>then()</code>方法中， 直接将<code>onResolved()</code>（或<code>onRejected()</code>）的返回值，传递给<code>resolve</code>（或<code>reject</code>），改变<code>promise2</code>的状态和内部值。这里有一个问题，如果<code>onResolved()</code>（或<code>onRejected()</code>）返回的也是一个<code>Promise</code>对象（或<code>thenable</code>对象），那么<code>promise2</code>不会等到这个返回的<code>Promise</code>对象<code>resolved</code>或的<code>rejected</code>后才执行，而是将返回的<code>Promise</code>对象作为<code>promise2</code>的内部值。看下面例子，最后一个<code>then()</code>方法执行后应该输出<code>2</code>才符合预期，而实际输出的是<code>ES6Promise</code>对象实例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>       <span class=\\\"token comment\\\">// 输出：ES6Promise 对象</span>\\n</code></pre>\\n      </div>\\n<p>为了解决上面这个问题，需要对<code>onResolved()</code>（或<code>onRejected()</code>）的返回值（暂称之为<code>x</code>）进行判断和处理，这里引入一个<code>resolveProcedure()</code>方法，该方法根据<code>x</code>值的类型，决定何时调用<code>promise2</code>的<code>resolve</code>或<code>reject</code>方法。如果<code>x</code>是一个<code>thenable</code>对象，则等到该<code>thenable</code>对象状态确定时才调用调用<code>promise2</code>的<code>resolve</code>或<code>reject</code>方法，否则立即调用<code>promise2</code>的<code>resolve</code>，如果中间抛出异常，则立即调用<code>promise2</code>的<code>reject</code>方法。代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>onResolved<span class=\\\"token punctuation\\\">,</span> onRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">let</span> promise2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">scheduleFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    onResolved <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onResolved <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onResolved <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> v<span class=\\\"token punctuation\\\">;</span>\\n                    onRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onRejected <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onRejected <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">throw</span> v<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token comment\\\">// 修改这里</span>\\n                        <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>resolved <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">onResolved</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">onRejected</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> resolve<span class=\\\"token punctuation\\\">,</span> reject <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>pending<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>scheduleFn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">scheduleFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> promise2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// 根据 x 值，解析 promise 状态</span>\\n <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">,</span> promise2 <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 2.3.1 If promise and x refer to the same object, reject promise with a TypeError as the reason.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise2 <span class=\\\"token operator\\\">===</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>    <span class=\\\"token comment\\\">// 2.3.2 If x is a promise, adopt its state</span>\\n        x<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">,</span> promise2<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> x <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> x <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> x <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\">// 2.3.3 </span>\\n        <span class=\\\"token keyword\\\">let</span> resolvedOrRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> then <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">.</span>then<span class=\\\"token punctuation\\\">;</span>      <span class=\\\"token comment\\\">// 2.3.3.1 Let then be x.then</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> then <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>   <span class=\\\"token comment\\\">// 2.3.3 If then is a function, call it with x as this, first argument resolvePromise, and second argument rejectPromise, where:</span>\\n                then<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> value <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>resolvedOrRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">,</span> promise2 <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2.3.3.3.1 If/when resolvePromise is called with a value y, run [[Resolve]](promise, y).</span>\\n                        resolvedOrRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token comment\\\">// 2.3.3.3.3 If both resolvePromise and rejectPromise are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>resolvedOrRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>             <span class=\\\"token comment\\\">// 2.3.3.3.2 If/when rejectPromise is called with a reason r, reject promise with r.</span>\\n                        resolvedOrRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token comment\\\">// 2.3.3.3.3 If both resolvePromise and rejectPromise are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>                <span class=\\\"token comment\\\">// 2.3.3.4 If then is not a function, fulfill promise with x.</span>\\n                <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>resolvedOrRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// 2.3.3.2 If retrieving the property x.then results in a thrown exception e, reject promise with e as the reason.</span>\\n                <span class=\\\"token comment\\\">// 2.3.3.4 If calling then throws an exception e</span>\\n                <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>     <span class=\\\"token comment\\\">// 2.3.4 If x is not an object or function, fulfill promise with x.</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>修改后，再次运行上面测试代码，结果符合预期：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>       <span class=\\\"token comment\\\">// 输出： 2</span>\\n</code></pre>\\n      </div>\\n<h2>实现 catch 方法</h2>\\n<p><code>ES6Promise</code>核心的<code>then</code>方法上面已经实现，<code>catch</code>方法不过是<code>then</code>方法的一种便捷形式，其实现如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>onRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>undefined<span class=\\\"token punctuation\\\">,</span> onRejected<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>实现 resolve/reject 静态</h2>\\n<p>ES6 的<code>Promise</code>对象还提供了两个静态方法<code>Promise.resolve</code>和<code>Promise.reject</code>，通过这两个方法可以很方便的将一般<code>javascript</code>值封装成<code>Promise</code>对象。实现这两个方法也很简单，以<code>Promise.resolve</code>为例，首先这个方法要返回一个新的<code>Promise</code>对象，新的<code>Promise</code>对象解析传入的值，这个解析过程交由<code>resolveProcedure()</code>方法完成，由于这是<code>resolve</code>方法，所以即使<code>value</code>是一个被<code>rejected</code>的<code>Promise</code>，也要将其结果<code>resolve</code>，所以传递给<code>resolveProcedure()</code>方法的第一个参数都是<code>resolve</code>方法。<code>Promise.reject</code>方法实现类似，代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">:</span> resolve<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>resolve<span class=\\\"token punctuation\\\">:</span> reject<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>测试</h2>\\n<p>上面的<code>ES6Promsie</code>通过了 <a href=\\\"https://github.com/promises-aplus/promises-tests\\\">promises-tests</a> 提供的全部测试用例，意味着其完全符合了 Promise/A+ 规范。</p>\\n<p>可以通过 npm 安装后，查看源码和测试结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// 安装\\n$ npm install es6-promise\\n// 编译\\n$ npm run build\\n// 运行测试用例\\n$ npm run test</code></pre>\\n      </div>\\n<h2>小结</h2>\\n<p><code>Promise</code>作为社区产物，最终被纳入 ECMAScript 规范，可见其是被大众所接收的。<code>Promise</code>改变了长久以来通过<code>callback</code>编写异步代码的方式，让异步回调以一种更优雅的方式链式调用，并拥有更清晰的错误处理。<code>Promise</code>同时也为<code>generator/yield</code>和<code>async/await</code>以同步方式编写异步代码提供了基础设施。<code>Promise</code>使用起来很简单，但是涉及到一些复杂或极端的例子，需要对<code>Promise</code>规范理解透彻才能正确得到结果。</p>\\n<p>附上一张根据自己理解画的<code>Promise</code>处理示意图：</p>\\n<p>最后附上项目地址和仓库地址：</p>\\n<p>github 地址 : <a href=\\\"https://github.com/whinc/es6-promise\\\">https://github.com/whinc/es6-promise</a></p>\\n<p>npm 地址：<a href=\\\"https://www.npmjs.com/package/whinc-es6-promise\\\">https://www.npmjs.com/package/whinc-es6-promise</a></p>\\n<h2>参考</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"https://promisesaplus.com/\\\">Promise/A+ 规范</a></p>\\n</li>\\n<li>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">Promise | MDN</a></p>\\n</li>\\n<li>\\n<p>崔鹏飞，<a href=\\\"http://cuipengfei.me/blog/2016/05/15/promise/\\\">自己动手实现Promises/A+规范</a></p>\\n</li>\\n<li>\\n<p><a href=\\\"https://github.com/promises-aplus/promises-tests\\\">promises-tests | github</a></p>\\n</li>\\n<li>\\n<p>阮一峰，<a href=\\\"http://es6.ruanyifeng.com/#docs/promise\\\">ECMAScript 6 入门 - Promise</a></p>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"动手实现 Promise\",\"date\":\"January 15, 2017\"}}},\"pathContext\":{\"slug\":\"/ECMAScript/implematiation-of-promise/\",\"previous\":false,\"next\":{\"fields\":{\"slug\":\"/introduction-to-redux/\"},\"frontmatter\":{\"title\":\"10 分钟理解 Redux\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---ecma-script-implematiation-of-promise-dc3cf153c2f322fcc7f9.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Whinc Blog\",\"author\":\"whincwu\"}},\"markdownRemark\":{\"id\":\"/Users/whincwu/Projects/blog/src/pages/ECMAScript/implematiation-of-promise/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h2>前言</h2>\\n<p>为了增强对 ES6 <code>Promise</code>工作方式的理解，我实现了一个自己的<code>ES6Promise</code>类，接口与 ES6 的<code>Promise</code>类一致（包含构造函数、<code>then</code>、<code>catch</code>、<code>resolve</code>、<code>reject</code>）， 并且符合 <a href=\\\"https://promisesaplus.com/\\\">Promise/A+ 规范</a> 。下面从简单开始，一步步实现一个自己的<code>Promise</code>。</p>\\n<p>下面是最终实现的<code>ES6Promise</code>使用示例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span>ES6Promise<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./es6-promise'</span>\\n\\n\\n<span class=\\\"token keyword\\\">let</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">let</span> p2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">999</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nES6Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> value <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> reason<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> ES6Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>p2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> reason<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>                    <span class=\\\"token comment\\\">// 999</span>\\n</code></pre>\\n      </div>\\n<h2>创建 Promise</h2>\\n<p>回想 ES6 的 <code>Promise</code>对象构造函数，它要求传入一个执行器，执行器有两个参数<code>resolve</code>和<code>reject</code>，两个参数都是函数类型，我们可以在执行器中调用这两个方法，将<code>Promise</code>变为<code>resolved</code>或<code>rejected</code>。先实现这个一步，代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>const State = {\\n    pending: 0,\\n    resolved: 1,\\n    rejected: 2\\n}\\n\\nclass ES6Promise {\\n    constructor(executor) {\\n        this._state = State.pending;    // 保存状态，取值为 State 之一\\n        this._value = undefined;        // 保存 resolve 或 reject 时所传入的值\\n        this._callbacks = [];           // 保存状态监听函数，promise 状态变化时调用\\n\\n        if (typeof executor === 'function') {\\n            let resolve = (value) => {\\n                this._transition(State.resolved, value);\\n            };\\n\\n            let reject = (value) => {\\n                this._transition(State.rejected, value);\\n            };\\n            executor(resolve, reject);\\n        }\\n    }\\n\\n    // 状态转移\\n    _transition(state, value) {        \\n        if (this._state === State.pending) {    \\n            this._state = state;               \\n            this._value = value;\\n            this._callbacks.forEach(callback => callback());\\n        } \\n    }\\n}</code></pre>\\n      </div>\\n<p>使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> promise1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>首先，在<code>MyPromise</code>构造函数中声明了两个成员变量<code>status</code>和<code>data</code>，分别表示<code>MyPromise</code>的状态和数据。根据<code>Promise</code>规范，其状态只能有三种：<code>pending</code>、<code>resolved</code>和<code>rejected</code>，初始状态是<code>pending</code>，一旦变化为<code>resolved</code>或<code>rejected</code>状态后，其状态不再变化。所以，初始设置<code>status</code>为<code>undefined</code>，当调用<code>resolve()</code>或<code>reject()</code>时，内部先判断其状态，如果状态已经发生变化，则直接返回，这样保证其状态不会被修改。否则，将状态标记为<code>resolved</code>或<code>rejected</code>，同时保存数据。</p>\\n<h2>实现 then 方法</h2>\\n<p><code>Promise</code>对象可以链式调用<code>then()</code>方法，这得益于<code>then()</code>返回的也是<code>Promise</code>对象（准确说是<code>thenable</code>对象，即包含<code>then</code>方法的对象），例如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>let promise1 = new ES6Promise((resolve, reject) => {\\n    resolve(1);\\n});\\n\\nlet promise2 = promise1.then(function onResolved(){}, function onRejected() {});</code></pre>\\n      </div>\\n<p>所以下面<code>ES6Promise</code>的<code>then</code>函数实现中，首先创建并返回一个新的<code>ES6Promise</code>对象<code>promise2</code>，在传入<code>promise2</code>构造函数的执行器内部，通过<code>resolve</code>和<code>reject</code>方法修改<code>promise2</code>的状态。<code>promise2</code>状态何时变化，取决于当前<code>promise1</code>的状态，如果<code>promise1</code>状态是<code>pending</code>，则等待<code>promise1</code>被<code>resolved</code>或<code>rejected</code>时执行<code>scheduleFn()</code>，否则立即执行<code>scheduleFn()</code>。</p>\\n<p><code>scheduleFn()</code>方法主要工作是，根据<code>promise1</code>当前状态是<code>resolved</code>（或<code>rejected</code>），调用<code>then(onResolved, onRejected)</code>方法参数中的<code>onResolved(promise1.value)</code>（或<code>onRejected(promise1.value)</code>），以<code>promise1</code>的内部值作为参数，返回结果传递给<code>promise2</code>的<code>resolve</code>（或<code>reject</code>）方法，从而改变<code>promise2</code>的状态和内部值。按 <a href=\\\"https://promisesaplus.com/\\\">Promise/A+ 规范</a> <code>scheduleFn()</code>必须是异步执行的，所以这里通过<code>setTimeout()</code>方法，让其在下个事件循环中处理。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>onResolved<span class=\\\"token punctuation\\\">,</span> onRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">let</span> promise2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">scheduleFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n                    onResolved <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onResolved <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onResolved <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> v<span class=\\\"token punctuation\\\">;</span>\\n                    onRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onRejected <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onRejected <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">throw</span> v<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>resolved<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">onResolved</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                            <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">onRejected</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token punctuation\\\">}</span>                    \\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>pending<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>scheduleFn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">scheduleFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> promise2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>实现 then 方法 v2</h2>\\n<p>上面实现的<code>then()</code>方法中， 直接将<code>onResolved()</code>（或<code>onRejected()</code>）的返回值，传递给<code>resolve</code>（或<code>reject</code>），改变<code>promise2</code>的状态和内部值。这里有一个问题，如果<code>onResolved()</code>（或<code>onRejected()</code>）返回的也是一个<code>Promise</code>对象（或<code>thenable</code>对象），那么<code>promise2</code>不会等到这个返回的<code>Promise</code>对象<code>resolved</code>或的<code>rejected</code>后才执行，而是将返回的<code>Promise</code>对象作为<code>promise2</code>的内部值。看下面例子，最后一个<code>then()</code>方法执行后应该输出<code>2</code>才符合预期，而实际输出的是<code>ES6Promise</code>对象实例：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>       <span class=\\\"token comment\\\">// 输出：ES6Promise 对象</span>\\n</code></pre>\\n      </div>\\n<p>为了解决上面这个问题，需要对<code>onResolved()</code>（或<code>onRejected()</code>）的返回值（暂称之为<code>x</code>）进行判断和处理，这里引入一个<code>resolveProcedure()</code>方法，该方法根据<code>x</code>值的类型，决定何时调用<code>promise2</code>的<code>resolve</code>或<code>reject</code>方法。如果<code>x</code>是一个<code>thenable</code>对象，则等到该<code>thenable</code>对象状态确定时才调用调用<code>promise2</code>的<code>resolve</code>或<code>reject</code>方法，否则立即调用<code>promise2</code>的<code>resolve</code>，如果中间抛出异常，则立即调用<code>promise2</code>的<code>reject</code>方法。代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>onResolved<span class=\\\"token punctuation\\\">,</span> onRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">let</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">let</span> promise2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> <span class=\\\"token function-variable function\\\">scheduleFn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    onResolved <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onResolved <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onResolved <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> v<span class=\\\"token punctuation\\\">;</span>\\n                    onRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> onRejected <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span> <span class=\\\"token operator\\\">?</span> onRejected <span class=\\\"token punctuation\\\">:</span> v <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">throw</span> v<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token comment\\\">// 修改这里</span>\\n                        <span class=\\\"token keyword\\\">let</span> x <span class=\\\"token operator\\\">=</span> self<span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>resolved <span class=\\\"token operator\\\">?</span> <span class=\\\"token function\\\">onResolved</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">onRejected</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">.</span>_value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                        <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> resolve<span class=\\\"token punctuation\\\">,</span> reject <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_state <span class=\\\"token operator\\\">===</span> State<span class=\\\"token punctuation\\\">.</span>pending<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_callbacks<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>scheduleFn<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">scheduleFn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">return</span> promise2<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n\\n<span class=\\\"token comment\\\">// 根据 x 值，解析 promise 状态</span>\\n <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span>promise<span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">,</span> promise2 <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 2.3.1 If promise and x refer to the same object, reject promise with a TypeError as the reason.</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>promise2 <span class=\\\"token operator\\\">===</span> x<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">TypeError</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>x <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>    <span class=\\\"token comment\\\">// 2.3.2 If x is a promise, adopt its state</span>\\n        x<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">,</span> promise2<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> x <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'object'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> x <span class=\\\"token operator\\\">!==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">||</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> x <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>  <span class=\\\"token comment\\\">// 2.3.3 </span>\\n        <span class=\\\"token keyword\\\">let</span> resolvedOrRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> then <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">.</span>then<span class=\\\"token punctuation\\\">;</span>      <span class=\\\"token comment\\\">// 2.3.3.1 Let then be x.then</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> then <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>   <span class=\\\"token comment\\\">// 2.3.3 If then is a function, call it with x as this, first argument resolvePromise, and second argument rejectPromise, where:</span>\\n                then<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">,</span> value <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>resolvedOrRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">,</span> promise2 <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2.3.3.3.1 If/when resolvePromise is called with a value y, run [[Resolve]](promise, y).</span>\\n                        resolvedOrRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token comment\\\">// 2.3.3.3.3 If both resolvePromise and rejectPromise are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> reason <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n                    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>resolvedOrRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>             <span class=\\\"token comment\\\">// 2.3.3.3.2 If/when rejectPromise is called with a reason r, reject promise with r.</span>\\n                        resolvedOrRejected <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n                    <span class=\\\"token punctuation\\\">}</span>\\n                    <span class=\\\"token comment\\\">// 2.3.3.3.3 If both resolvePromise and rejectPromise are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.</span>\\n                <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>                <span class=\\\"token comment\\\">// 2.3.3.4 If then is not a function, fulfill promise with x.</span>\\n                <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>resolvedOrRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token comment\\\">// 2.3.3.2 If retrieving the property x.then results in a thrown exception e, reject promise with e as the reason.</span>\\n                <span class=\\\"token comment\\\">// 2.3.3.4 If calling then throws an exception e</span>\\n                <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>     <span class=\\\"token comment\\\">// 2.3.4 If x is not an object or function, fulfill promise with x.</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>修改后，再次运行上面测试代码，结果符合预期：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">let</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>value <span class=\\\"token operator\\\">=></span> console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>       <span class=\\\"token comment\\\">// 输出： 2</span>\\n</code></pre>\\n      </div>\\n<h2>实现 catch 方法</h2>\\n<p><code>ES6Promise</code>核心的<code>then</code>方法上面已经实现，<code>catch</code>方法不过是<code>then</code>方法的一种便捷形式，其实现如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>onRejected<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>undefined<span class=\\\"token punctuation\\\">,</span> onRejected<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>实现 resolve/reject 静态</h2>\\n<p>ES6 的<code>Promise</code>对象还提供了两个静态方法<code>Promise.resolve</code>和<code>Promise.reject</code>，通过这两个方法可以很方便的将一般<code>javascript</code>值封装成<code>Promise</code>对象。实现这两个方法也很简单，以<code>Promise.resolve</code>为例，首先这个方法要返回一个新的<code>Promise</code>对象，新的<code>Promise</code>对象解析传入的值，这个解析过程交由<code>resolveProcedure()</code>方法完成，由于这是<code>resolve</code>方法，所以即使<code>value</code>是一个被<code>rejected</code>的<code>Promise</code>，也要将其结果<code>resolve</code>，所以传递给<code>resolveProcedure()</code>方法的第一个参数都是<code>resolve</code>方法。<code>Promise.reject</code>方法实现类似，代码如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">ES6Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 省略重复代码...</span>\\n\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">:</span> resolve<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span>reason<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ES6Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">resolveProcedure</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>resolve<span class=\\\"token punctuation\\\">:</span> reject<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> reason<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2>测试</h2>\\n<p>上面的<code>ES6Promsie</code>通过了 <a href=\\\"https://github.com/promises-aplus/promises-tests\\\">promises-tests</a> 提供的全部测试用例，意味着其完全符合了 Promise/A+ 规范。</p>\\n<p>可以通过 npm 安装后，查看源码和测试结果：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>// 安装\\n$ npm install es6-promise\\n// 编译\\n$ npm run build\\n// 运行测试用例\\n$ npm run test</code></pre>\\n      </div>\\n<h2>小结</h2>\\n<p><code>Promise</code>作为社区产物，最终被纳入 ECMAScript 规范，可见其是被大众所接收的。<code>Promise</code>改变了长久以来通过<code>callback</code>编写异步代码的方式，让异步回调以一种更优雅的方式链式调用，并拥有更清晰的错误处理。<code>Promise</code>同时也为<code>generator/yield</code>和<code>async/await</code>以同步方式编写异步代码提供了基础设施。<code>Promise</code>使用起来很简单，但是涉及到一些复杂或极端的例子，需要对<code>Promise</code>规范理解透彻才能正确得到结果。</p>\\n<p>附上一张根据自己理解画的<code>Promise</code>处理示意图：</p>\\n<p>最后附上项目地址和仓库地址：</p>\\n<p>github 地址 : <a href=\\\"https://github.com/whinc/es6-promise\\\">https://github.com/whinc/es6-promise</a></p>\\n<p>npm 地址：<a href=\\\"https://www.npmjs.com/package/whinc-es6-promise\\\">https://www.npmjs.com/package/whinc-es6-promise</a></p>\\n<h2>参考</h2>\\n<ul>\\n<li>\\n<p><a href=\\\"https://promisesaplus.com/\\\">Promise/A+ 规范</a></p>\\n</li>\\n<li>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\\">Promise | MDN</a></p>\\n</li>\\n<li>\\n<p>崔鹏飞，<a href=\\\"http://cuipengfei.me/blog/2016/05/15/promise/\\\">自己动手实现Promises/A+规范</a></p>\\n</li>\\n<li>\\n<p><a href=\\\"https://github.com/promises-aplus/promises-tests\\\">promises-tests | github</a></p>\\n</li>\\n<li>\\n<p>阮一峰，<a href=\\\"http://es6.ruanyifeng.com/#docs/promise\\\">ECMAScript 6 入门 - Promise</a></p>\\n</li>\\n</ul>\",\"frontmatter\":{\"title\":\"动手实现 Promise\",\"date\":\"January 15, 2017\"}}},\"pathContext\":{\"slug\":\"/ECMAScript/implematiation-of-promise/\",\"previous\":false,\"next\":{\"fields\":{\"slug\":\"/introduction-to-redux/\"},\"frontmatter\":{\"title\":\"10 分钟理解 Redux\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/ecma-script-implematiation-of-promise.json\n// module id = 481\n// module chunks = 241246743303109"],"sourceRoot":""}